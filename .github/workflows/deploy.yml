name: build-and-deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Lowercase the owner for GHCR image paths (required)
      - name: Compute lowercase owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_ENV"

      # Backend image
      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-backend:latest
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-backend:${{ github.sha }}

      # Frontend image
      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-frontend:latest
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-frontend:${{ github.sha }}

      # Playwright image (optional)
      - name: Build & push playwright
        uses: docker/build-push-action@v5
        with:
          context: ./playwright-service
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-playwright:latest
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-playwright:${{ github.sha }}
            
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Upload repo via SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        source: |
          docker-compose.yml
          docker-compose.prod.yml
          frontend/**
          backend/**
          playwright-service/**
        target: /home/ubuntu/job-apply-bot-final
        rm: true
        overwrite: true
        strip_components: 0
        debug: true

    - name: SSH deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script_stop: true
        script: |
          set -euo pipefail
          DOMAIN='${{ secrets.DOMAIN }}'
          EMAIL='${{ secrets.EMAIL }}'
          DEPLOY_PATH='/home/ubuntu/job-apply-bot-final'

          echo "➡ Using DEPLOY_PATH: [$DEPLOY_PATH]"
          sudo mkdir -p "$DEPLOY_PATH"
          sudo chown "$USER":"$USER" "$DEPLOY_PATH"

          echo "➡ Listing DEPLOY_PATH:"
          ls -la "$DEPLOY_PATH" || true
          echo "➡ Compose files found:"
          find "$DEPLOY_PATH" -maxdepth 2 -type f -name 'docker-compose*.yml' -print || true

          if ! command -v docker >/dev/null 2>&1; then
            curl -fsSL https://get.docker.com | sudo sh
          fi

          if [ -n '${{ secrets.GHCR_USERNAME }}' ] && [ -n '${{ secrets.GHCR_TOKEN }}' ]; then
            echo '${{ secrets.GHCR_TOKEN }}' | sudo docker login ghcr.io -u '${{ secrets.GHCR_USERNAME }}' --password-stdin
          fi

          COMPOSE="-f $DEPLOY_PATH/docker-compose.yml -f $DEPLOY_PATH/docker-compose.prod.yml"

          sudo docker compose $COMPOSE pull
          sudo docker compose $COMPOSE up -d

          if ! sudo docker compose $COMPOSE exec -T frontend test -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem"; then
            sudo docker compose $COMPOSE run --rm certbot \
              certonly --webroot -w /var/www/certbot \
              -d "${DOMAIN}" --email "${EMAIL}" --agree-tos --no-eff-email
            sudo docker compose $COMPOSE exec -T frontend nginx -s reload || true
          fi

          curl -I --max-time 10 "http://${DOMAIN}"  || true
          curl -I --max-time 10 "https://${DOMAIN}" || true
          curl -I --max-time 10 "https://${DOMAIN}/api/jobs" || true

name: build-and-deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # derive a lowercase owner for GHCR paths
      - name: Compute lowercase owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      # Backend
      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-backend:latest
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-backend:${{ github.sha }}

      # Frontend
      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-frontend:latest
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-frontend:${{ github.sha }}

      # Playwright (optional)
      - name: Build & push playwright
        uses: docker/build-push-action@v5
        with:
          context: ./playwright-service
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-playwright:latest
            ghcr.io/${{ env.OWNER_LC }}/job-apply-bot-final-playwright:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Upload repo via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "./"
          target: ${{ secrets.DEPLOY_PATH }}
          rm: true
          overwrite: true
          strip_components: 0
          exclude: |
            **/.git**
            **/node_modules/**
            **/dist/**
            **/*.log

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -e
            DOMAIN="${{ secrets.DOMAIN }}"
            EMAIL="${{ secrets.EMAIL }}"
            cd "${{ secrets.DEPLOY_PATH }}"

            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sudo sh
            fi

            # optional GHCR login if your packages are private
            if [ -n "${{ secrets.GHCR_USERNAME }}" ] && [ -n "${{ secrets.GHCR_TOKEN }}" ]; then
              echo "${{ secrets.GHCR_TOKEN }}" | sudo docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            fi

            sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
            sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

            if ! sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T frontend \
              test -f /etc/letsencrypt/live/${DOMAIN}/fullchain.pem; then

              sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml run --rm certbot \
                certonly --webroot -w /var/www/certbot \
                -d ${DOMAIN} --email ${EMAIL} --agree-tos --no-eff-email

              sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T frontend nginx -s reload || true
            fi

            curl -I --max-time 10 "https://${DOMAIN}" || true
            curl -I --max-time 10 "https://${DOMAIN}/api/jobs" || true
